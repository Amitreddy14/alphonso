import React, { useState, useCallback, useEffect } from 'react';
import { MdOutlineRecordVoiceOver } from "react-icons/md";
import { FaPause, FaPlay } from "react-icons/fa";
import VoiceRecorder from '../components/VoiceRecorder';
import ChatMessage from '../components/ChatMessage';
import LanguageSelector from '../components/LanguageSelector';
import { initializeGemini, generateResponse } from '../services/gemini';
import { speechToText, textToSpeech, pauseSpeechRecognition, resumeSpeechRecognition } from '../services/speech';
import { getLanguageCode } from '../utils/languageMapping';

const GEMINI_API_KEY = 'AIzaSyDSynDh4asJf6mcqtiEy2A5SG4UdX8wEIE';

function Voicechatbot() {
  const [messages, setMessages] = useState([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [isPaused, setIsPaused] = useState(false);
  const [selectedLanguage, setSelectedLanguage] = useState({
    code: 'en',
    name: 'English',
    localName: 'English',
  });

  useEffect(() => {
    initializeGemini(GEMINI_API_KEY);
  }, []);

  const handleRecordingComplete = useCallback(async () => {
    if (isPaused) {
      console.log('Recording skipped due to pause');
      return;
    }

    setIsProcessing(true);

    try {
      const userMessage = { content: 'üé§ Recording...', type: 'user' };
      setMessages((prev) => [...prev, userMessage]);

      const languageCode = getLanguageCode(selectedLanguage.code);
      const transcribedText = await speechToText(languageCode);

      setMessages((prev) =>
        prev.map((msg, idx) =>
          idx === prev.length - 1 ? { ...msg, content: transcribedText } : msg
        )
      );

      const response = await generateResponse(transcribedText, selectedLanguage.code);

      const assistantMessage = { content: response, type: 'assistant' };
      setMessages((prev) => [...prev, assistantMessage]);

      await textToSpeech(response, languageCode);
    } catch (error) {
      console.error('Error processing voice message:', error);

      const errorMessages = {
        en: error.message === 'Speech recognition is paused'
          ? 'Recognition is paused. Resume to continue.'
          : error.message === 'Recognition stopped by user.'
          ? 'Recording stopped. Press play to resume and try again.'
          : error.message || 'Sorry, there was an error processing your message. Please try again.',
        hi: error.message === 'Recognition stopped by user.' 
          ? '‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§¨‡§Ç‡§¶ ‡§ï‡§∞ ‡§¶‡•Ä ‡§ó‡§à‡•§ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•ç‡§≤‡•á ‡§¶‡§¨‡§æ‡§è‡§Ç‡•§'
          : '‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§Ü‡§™‡§ï‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§',
        mr: error.message === 'Recognition stopped by user.' 
          ? '‡§∞‡•á‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§•‡§æ‡§Ç‡§¨‡§µ‡§≤‡•Ä. ‡§™‡•Å‡§®‡•ç‡§π‡§æ ‡§∏‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§™‡•ç‡§≤‡•á ‡§¶‡§æ‡§¨‡§æ.'
          : '‡§ï‡•ç‡§∑‡§Æ‡§∏‡•ç‡§µ, ‡§§‡•Å‡§Æ‡§ö‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§ï‡§∞‡§§‡§æ‡§®‡§æ ‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä ‡§Ü‡§≤‡•Ä. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡•ç‡§π‡§æ ‡§™‡•ç‡§∞‡§Ø‡§§‡•ç‡§® ‡§ï‡§∞‡§æ.',
        pa: error.message === 'Recognition stopped by user.' 
          ? '‡®∞‡®ø‡®ï‡®æ‡®∞‡®°‡®ø‡©∞‡®ó ‡®∞‡©ã‡®ï ‡®¶‡®ø‡©±‡®§‡©Ä ‡®ó‡®à‡•§ ‡®¶‡©Å‡®¨‡®æ‡®∞‡®æ ‡®∏‡®º‡©Å‡®∞‡©Ç ‡®ï‡®∞‡®® ‡®≤‡®à ‡®™‡®≤‡©á ‡®¶‡®¨‡®æ‡®ì‡•§'
          : '‡®Æ‡©Å‡®Ü‡®´‡®º ‡®ï‡®∞‡®®‡®æ, ‡®§‡©Å‡®π‡®æ‡®°‡®æ ‡®∏‡©Å‡®®‡©á‡®π‡®æ ‡®™‡©ç‡®∞‡©ã‡®∏‡©à‡®∏ ‡®ï‡®∞‡®® ‡®µ‡®ø‡©±‡®ö ‡®ó‡®≤‡®§‡©Ä ‡®π‡©ã‡®à‡•§ ‡®ï‡®ø‡®∞‡®™‡®æ ‡®ï‡®∞‡®ï‡©á ‡®¶‡©Å‡®¨‡®æ‡®∞‡®æ ‡®ï‡©ã‡®∏‡®º‡®ø‡®∏‡®º ‡®ï‡®∞‡©ã‡•§',
        bn: error.message === 'Recognition stopped by user.' 
          ? '‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶°‡¶ø‡¶Ç ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡ßç‡¶≤‡ßá ‡¶ü‡¶ø‡¶™‡ßÅ‡¶®‡•§'
          : '‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§',
        te: error.message === 'Recognition stopped by user.' 
          ? '‡∞∞‡∞ø‡∞ï‡∞æ‡∞∞‡±ç‡∞°‡∞ø‡∞Ç‡∞ó‡±ç ‡∞Ü‡∞™‡∞ø‡∞µ‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø. ‡∞Æ‡∞≥‡±ç‡∞≤‡±Ä ‡∞™‡±ç‡∞∞‡∞æ‡∞∞‡∞Ç‡∞≠‡∞ø‡∞Ç‡∞ö‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞™‡±ç‡∞≤‡±á ‡∞®‡±ä‡∞ï‡±ç‡∞ï‡∞Ç‡∞°‡∞ø.'
          : '‡∞ï‡±ç‡∞∑‡∞Æ‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø, ‡∞Æ‡±Ä ‡∞∏‡∞Ç‡∞¶‡±á‡∞∂‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞™‡±ç‡∞∞‡∞æ‡∞∏‡±Ü‡∞∏‡±ç ‡∞ö‡±á‡∞Ø‡∞°‡∞Ç‡∞≤‡±ã ‡∞≤‡±ã‡∞™‡∞Ç ‡∞ú‡∞∞‡∞ø‡∞ó‡∞ø‡∞Ç‡∞¶‡∞ø. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡∞≥‡±ç‡∞≥‡±Ä ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.',
        kn: error.message === 'Recognition stopped by user.' 
          ? '‡≤∞‡≥Ü‡≤ï‡≤æ‡≤∞‡≥ç‡≤°‡≤ø‡≤Ç‡≤ó‡≥ç ‡≤®‡≤ø‡≤≤‡≥ç‡≤≤‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü. ‡≤Æ‡≤§‡≥ç‡≤§‡≥Ü ‡≤™‡≥ç‡≤∞‡≤æ‡≤∞‡≤Ç‡≤≠‡≤ø‡≤∏‡≤≤‡≥Å ‡≤™‡≥ç‡≤≤‡≥á ‡≤í‡≤§‡≥ç‡≤§‡≤ø‡≤∞‡≤ø.'
          : '‡≤ï‡≥ç‡≤∑‡≤Æ‡≤ø‡≤∏‡≤ø, ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤∏‡≤Ç‡≤¶‡≥á‡≤∂‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≥ç‡≤∞‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø‡≥Ü‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≥Å‡≤µ‡≤≤‡≥ç‡≤≤‡≤ø ‡≤¶‡≥ã‡≤∑ ‡≤ï‡≤Ç‡≤°‡≥Å‡≤¨‡≤Ç‡≤¶‡≤ø‡≤¶‡≥Ü. ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Ü ‡≤™‡≥ç‡≤∞‡≤Ø‡≤§‡≥ç‡≤®‡≤ø‡≤∏‡≤ø.',
      };

      const errorMessage = {
        content: errorMessages[selectedLanguage.code] || errorMessages.en,
        type: 'assistant',
      };

      setMessages((prev) => [...prev, errorMessage]);
    } finally {
      setIsProcessing(false);
    }
  }, [selectedLanguage, isPaused]);

  const togglePause = useCallback(() => {
    setIsPaused((prev) => {
      const newState = !prev;
      if (newState) {
        pauseSpeechRecognition();
        console.log('Paused');
      } else {
        resumeSpeechRecognition();
        console.log('Resumed');
      }
      return newState;
    });
  }, []);

  return (
    <div className="min-h-screen bg-gray-100">
      <header className="bg-green-600 text-white p-4 shadow-md">
        <div className="container mx-auto flex items-center justify-between">
          <div className="flex items-center gap-2">
            <MdOutlineRecordVoiceOver className="w-8 h-8" />
            <h1 className="text-2xl font-bold">Kisan Saathi / ‡§ï‡§ø‡§∏‡§æ‡§® ‡§∏‡§æ‡§•‡•Ä</h1>
          </div>
          <LanguageSelector
            selectedLanguage={selectedLanguage}
            onLanguageChange={setSelectedLanguage}
          />
        </div>
      </header>

      <main className="container mx-auto max-w-4xl p-4">
        <div className="bg-gray-50 rounded-lg shadow-lg min-h-[70vh] p-4 mb-4 overflow-y-auto">
          {messages.length === 0 ? (
            <div className="flex flex-col items-center justify-center h-[60vh] text-gray-500">
              <MdOutlineRecordVoiceOver className="w-16 h-16 mb-4 text-green-500" />
              <p className="text-xl mb-2">Welcome! / ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à!</p>
              <p className="text-sm text-center">
                Press the mic button below to ask your question
                <br />
                ‡§Ö‡§™‡§®‡§æ ‡§∏‡§µ‡§æ‡§≤ ‡§™‡•Ç‡§õ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡•Ä‡§ö‡•á ‡§Æ‡§æ‡§á‡§ï ‡§¨‡§ü‡§® ‡§¶‡§¨‡§æ‡§è‡§Ç
              </p>
            </div>
          ) : (
            <div className="space-y-4">
              {messages.map((message, index) => (
                <ChatMessage key={index} message={message} />
              ))}
            </div>
          )}
        </div>

        <div className="flex justify-center gap-4">
          <VoiceRecorder
            onRecordingComplete={handleRecordingComplete}
            isProcessing={isProcessing}
            isPaused={isPaused}
          />
          <button
            onClick={togglePause}
            className={`p-4 rounded-full shadow-md transition-all ${
              isPaused
                ? 'bg-green-500 hover:bg-green-600'
                : 'bg-yellow-500 hover:bg-yellow-600'
            } text-white`}
          >
            {isPaused ? <FaPlay size={24} /> : <FaPause size={24} />}
          </button>
        </div>
      </main>
    </div>
  );
}

export default Voicechatbot;